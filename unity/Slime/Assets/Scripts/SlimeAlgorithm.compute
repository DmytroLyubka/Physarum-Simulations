#pragma kernel AlgorithmStep

// Agent struct
struct Agent
{
    float2 position;
    float angle;
};

RWStructuredBuffer<Agent> agents; // contains agent structs
RWTexture2D<float4> trailMap; // tracks agent positions + trail deposits
RWTexture2D<float4> chemicalSourceMap; // tracks chemical sources
uint agentCount; // number of agents in simulation
int width; // texture width
int height; // texture height
float moveSpeed; // agent move speed
float agentRotationAngle; // angle at which agents rotate
float sensorOffset; // sensor distance from agent
float sensorAngle; // sensor angle relative to agent
float time; // total time passed since start of simulation
float trailDeposit; // trail value agents deposit
bool agentCollision; // agent collision toggle
bool torus; // torus surface toggle
float chemicalDominance; // strength of chemicals compared to agent trails
bool circularDomain; // toggles circular agent domain
float repellentStrength; // increase to movement speed when repellent is found

// Computes a random 32-bit uint in the range 0 to 4294967295.
// https://www.pcg-random.org/index.html
uint pcgHash(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

// Scales pcgHash() output to the range 0 and 1.
float scale(uint input)
{
    // 4294967295 = maximum value of a 32-bit unsigned int
    return input / 4294967295.0;
}

// Evaluates N mod M, supports negative N (native % operator does not)
float mod(float n, float m)
{
    return ((n % m) + m) % m;
}

// Clamps / wraps value on/around boundary depending on whether or not a torus surface is enabled.
// Casts and rounds mod value to int if torus is enabled.
float wrapIndex(float value, float boundary)
{
    if (torus)
    {
        return (int) round(mod(value, boundary-1));
    }
    else
    {
        return clamp(value, 0, boundary-1);
    }
}

// Clamps / wraps value on/around boundary depending on whether or not a torus surface is enabled.
float wrap(float value, float boundary)
{
    if (torus)
    {
        return mod(value, boundary-1);
    }
    else
    {
        return clamp(value, 0, boundary-1);
    }
}



// Checks if two numbers are approximately equal, up to epsilon = 0.01. Using equality doesn't seem to work very well...
// Maybe due to the RenderTexture color format that we have? Using a "bigger" format (more bits per channel) might solve
// the equality issue.
bool approx(float value, float target)
{
    if (abs(value - target) < 0.01)
    {
        return true;
    }
    else
    {
        return false;
    }
}

// Checks trail map value detected by a sensor with angle sensorDeltaAngle relative to agent.
float checkSensor(Agent agent, float sensorDeltaAngle)
{
    float globalSensorAngle = agent.angle + sensorDeltaAngle;
    float2 sensorDirection = float2(cos(globalSensorAngle), sin(globalSensorAngle));
    float2 sensorPosition = agent.position + sensorDirection * sensorOffset;

    int sensorCoordX = wrap(sensorPosition.x, width);
    int sensorCoordY = wrap(sensorPosition.y, height);

    // Formula: f(x) = (x-0.5) * 2. Attractant = 1, repellent = 0, nothing = 0.5. Then, f(repellent) = -1, f(attractant) = +1, f(nothing) = 0
    return dot(trailMap[int2(sensorCoordX, sensorCoordY)].xyz, int3(1, 1, 1))
        + (trailMap[int2(sensorCoordX, sensorCoordY)].w - 0.5) * 2 * chemicalDominance;
}

// Executes algorithm step.
[numthreads(16,1,1)]
void AlgorithmStep (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= agentCount)
    {
        return;
    }

    Agent agent = agents[id.x];
    float2 pos = agent.position;

    uint random = pcgHash(pos.y * width + pos.x + pcgHash(id.x + time * 100000));

    // Check sensor trail values
    float frontTrailValue = checkSensor(agent, 0);
    float leftTrailValue = checkSensor(agent, sensorAngle);
    float rightTrailValue = checkSensor(agent, -sensorAngle);

    bool newPositionOccupied = false;
    bool repellentFound = false;

    // All trail values are positive (no repellents found), algorithm step matches Jones's
    if ((frontTrailValue > 0 || approx(frontTrailValue, 0)) && (leftTrailValue > 0 || approx(leftTrailValue, 0)) && (rightTrailValue > 0 || approx(rightTrailValue, 0)))
    {
        // Continue in same direction
        if (frontTrailValue > leftTrailValue && frontTrailValue > rightTrailValue)
        {
            // pass
        }
        /* Note: It doesn't really make sense to have the choice between left and right
        * rotation be random here? The fact that the front sensor is detecting a weaker
        * chemoattractant than the two off-centre sensors does not imply that the left
        * and right sensors have equal chemoattractant concentration, it is very much
        * possible that the left sensor has detected a higher trail value while at the
        * same time the front sensor has detected the lowest trail value (in which case
        * the agent should rotate left).
        * 
        * TODO: Make this step more deterministic, only have rotation choice be random if
        * left and right sensors have the same trail value, both of which must be higher
        * than that of the front sensor.
        */
        else if (frontTrailValue < leftTrailValue && frontTrailValue < rightTrailValue)
        {
            // // Turn right
            // if (rightTrailValue > leftTrailValue)
            // {
            //     agents[id.x].angle -= agentRotationAngle;
            // }
            // // Turn left
            // else if (leftTrailValue > rightTrailValue)
            // {
            //     agents[id.x].angle += agentRotationAngle;
            // }
            // else
            // {
            //     /* All sensor trail values are equal - maybe have random choice of rotation direction
            //         * here?
            //         */
            //     // pass
            //     if (scale(random) > 0.5)
            //     {
            //         agents[id.x].angle += agentRotationAngle;
            //     }
            //     else
            //     {
            //         agents[id.x].angle -= agentRotationAngle;
            //     }
            // }
            if (scale(random) > 0.5)
            {
                agents[id.x].angle += agentRotationAngle;
            }
            else
            {
                agents[id.x].angle -= agentRotationAngle;
            }
        }

        // Turn right
        else if (rightTrailValue > leftTrailValue)
        {
            agents[id.x].angle -= agentRotationAngle;
        }
        // Turn left
        else if (leftTrailValue > rightTrailValue)
        {
            agents[id.x].angle += agentRotationAngle;
        }
        else
        {
            // All sensor trail values are equal.
            // pass
        }
    }
    /* One of the sensors found a repellent: CUSTOM ALGORITHM for deciding on rotation direction + magnitude.
     * If we find a paper that details a repellent algorithm then we should test it out. Meanwhile, we need
     * to implement our own.
     */
    else
    {
        repellentFound = true;
        /* All trail values are negative, randomly rotate. We could maybe make this more deterministic
         * and rotate in the direction of the largest trail value?
         */
        if (leftTrailValue < 0 && frontTrailValue < 0 && rightTrailValue < 0)
        {
            /* If the agent can't find a good path and there's repellent everywhere, then we don't want it
             * to deposit a trail as that's a false positive for the surrounding agents. Instead, we treat
             * it's destination position as being taken and later on randomly orient the agent.
             */
            newPositionOccupied = true;
        }
        // Left and front trail values are negative: rotate right twice as much.
        else if (leftTrailValue < 0 && frontTrailValue < 0)
        {
            agents[id.x].angle -= 2 * agentRotationAngle;
        }
        // Right and front trail values are negative: rotate left twice as much.
        else if (rightTrailValue < 0 && frontTrailValue < 0)
        {
            agents[id.x].angle += 2 * agentRotationAngle;
        }
        // Left and right trail values are negative: don't rotate.
        else if (leftTrailValue < 0 && rightTrailValue < 0)
        {
            // pass
        }
        // Left trail value is negative: rotate right once if front is largest, twice if right is largest.
        else if (leftTrailValue < 0)
        {
            if (frontTrailValue > rightTrailValue)
            {
                agents[id.x].angle -= agentRotationAngle;
            }
            else if (rightTrailValue > frontTrailValue)
            {
                agents[id.x].angle -= 2 * agentRotationAngle;
            }
            // Right and front trail values are equal: randomly rotate right once or twice.
            else
            {
                if (scale(random) > 0.5)
                {
                    agents[id.x].angle -= agentRotationAngle;
                }
                else
                {
                    agents[id.x].angle -= 2 * agentRotationAngle;
                }
            }
        }
        // Right trail value is negative: rotate left once if front is largest, twice if left is largest.
        else if (rightTrailValue < 0)
        {
            if (frontTrailValue > leftTrailValue)
            {
                agents[id.x].angle += agentRotationAngle;
            }
            else if (leftTrailValue > frontTrailValue)
            {
                agents[id.x].angle += 2 * agentRotationAngle;
            }
            // Left and front trail values are equal: randomly rotate left once or twice.
            else
            {
                if (scale(random) > 0.5)
                {
                    agents[id.x].angle += agentRotationAngle;
                }
                else
                {
                    agents[id.x].angle += 2 * agentRotationAngle;
                }
            }
        }
        // Front trail value is negative: rotate left twice if left is largest, right twice if right is largest.
        else if (frontTrailValue < 0)
        {
            if (leftTrailValue > rightTrailValue)
            {
                agents[id.x].angle += 2 * agentRotationAngle;
            }
            else if (rightTrailValue > leftTrailValue)
            {
                agents[id.x].angle -= 2 * agentRotationAngle;
            }
            else
            {
                // Left and right trail values are equal: randomly rotate left or right twice.
                if (scale(random) > 0.5)
                {
                    agents[id.x].angle += 2 * agentRotationAngle;
                }
                else
                {
                    agents[id.x].angle -= 2 * agentRotationAngle;
                }
            }
        }
    }

    // Update position. If a repellent is found, increase the distance that the agent jumps.
    float2 direction = float2(cos(agents[id.x].angle), sin(agents[id.x].angle));
    float2 newPosition = agent.position + direction * moveSpeed * (repellentFound ? repellentStrength : 1.0);

    if (torus)
    {
        newPosition.x = mod(newPosition.x, width);
        newPosition.y = mod(newPosition.y, height);
    }

    // Check if new position is already occupied by an agent
    if (agentCollision)
    {
        for (uint i = 0; i < agentCount; i++)
        {
            // Collision with agents
            if (all(agents[i].position == newPosition))
            {
                newPositionOccupied = true;
            }
            
            // Collision with attractant chemical
            if (approx(chemicalSourceMap[int2(newPosition)].w, 1.0))
            {
                newPositionOccupied = true;
            }
        }
    }

    if (circularDomain) // circular boundary
    {
        // Agent has hit boundary or target position is occupied, choose random agent angle and don't deposit trail
        if (((newPosition.x - (float)width/2) * (newPosition.x - (float)width/2) + (newPosition.y - (float)height/2) * (newPosition.y - (float)height/2) > (float)width/2.25 * (float)width/2.25)
             || newPositionOccupied)
        {
            random = pcgHash(random);
            float randomAngle = scale(random) * 2 * 3.1415;
            agents[id.x].angle = randomAngle;
        }
        // No boundaries hit, deposit trail
        else
        {
            trailMap[int2(newPosition)] = float4(trailMap[int2(newPosition)].xyz + trailDeposit, trailMap[int2(newPosition)].w);
            agents[id.x].position = newPosition;
        }
    }
    else // rectangular boundary
    {
        // Agent has hit boundary or target position is occupied, choose random agent angle and don't deposit trail
        if ((((newPosition.x < 0 || newPosition.x >= width || newPosition.y < 0 || newPosition.y >= height)) && !torus)
                || newPositionOccupied)
        {
            random = pcgHash(random);
            float randomAngle = scale(random) * 2 * 3.1415;

            newPosition.x = clamp(newPosition.x, 0, width-1);
            newPosition.y = clamp(newPosition.y, 0, height-1);

            agents[id.x].angle = randomAngle;
        }
        // No boundaries hit, deposit trail
        else
        {
            trailMap[int2(newPosition)] = float4(trailMap[int2(newPosition)].xyz + trailDeposit, trailMap[int2(newPosition)].w);
            agents[id.x].position = newPosition;
        }
    }
}

#pragma kernel ProcessTrailMap

RWTexture2D<float4> processedTrailMap; // texture for trail map post-processing
float decayRate;
float diffuseRate;
int kernelHalfWidth;

// Decays and diffuses trail map.
[numthreads(8,8,1)]
void ProcessTrailMap (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    // Deposit chemicals from chemical source map onto trail map
    if (approx(chemicalSourceMap[id.xy].w, 1.0)) // attractant
    {
        trailMap[id.xy] = float4(trailMap[id.xy].xyz, 1.0);
    }
    
    if (approx(chemicalSourceMap[id.xy].w, 0.0)) // repellent
    {
       trailMap[id.xy] = float4(trailMap[id.xy].xyz, 0.0);
    }
    
    if (approx(chemicalSourceMap[id.xy].w, 0.5)) // no chemical
    {
        trailMap[id.xy] = float4(trailMap[id.xy].xyz, 0.5);
    }

    // Trail map processing
    float4 sum = 0;
    for (int x = -kernelHalfWidth; x <= kernelHalfWidth; x++)
    {
        for (int y = -kernelHalfWidth; y <= kernelHalfWidth; y++)
        {
            int kernelX = wrapIndex(id.x + x, width);
            int kernelY = wrapIndex(id.y + y, height);
            sum += trailMap[int2(kernelX, kernelY)];
        }
    }

    float4 diffusedTrail = sum / ((1 + 2 * kernelHalfWidth) * (1 + 2 * kernelHalfWidth));

    // Weighted average between original and diffused trail values
    float4 weightedDiffusedTrail = (1 - diffuseRate) * trailMap[id.xy] + diffuseRate * diffusedTrail;

    // Chemical stored in the alpha channel needs to be decayed separetely the the RGB channels.
    float oldChemicalAlpha = weightedDiffusedTrail.w;
    float newChemicalAlpha;
    
    if (approx(oldChemicalAlpha, 0.5)) // no chemical
    {
        newChemicalAlpha = oldChemicalAlpha;
    }
    else if (oldChemicalAlpha < 0.5) // repellent
    {
        float oldRepellentValue = (oldChemicalAlpha - 0.5) * 2;
        float newRepellentValue = oldRepellentValue + decayRate;
        newChemicalAlpha = (newRepellentValue / 2) + 0.5;
    }
    else if (oldChemicalAlpha > 0.5) // attractant
    {
        float oldAttractantValue = (oldChemicalAlpha - 0.5) * 2;
        float newAttractantValue = oldAttractantValue - decayRate;
        newChemicalAlpha = (newAttractantValue / 2) + 0.5;
    }

    processedTrailMap[id.xy] = float4(max(0, weightedDiffusedTrail.xyz - decayRate), newChemicalAlpha);
}

#pragma kernel RefreshChemicalValues

bool voronoiEnvironment; // toggles Voronoi environment

// Sets hardcoded chemical source map values.
[numthreads(8,8,1)]
void RefreshChemicalValues (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    // Attractant placed around circular domain - needed for Voronoi cells
    if ((id.x - (float)width/2.0) * (id.x - (float)width/2) + (id.y - (float)height/2) * (id.y - (float)height/2) > (float)width/2.25 * (float)width/2.25)
    {
        if (voronoiEnvironment)
        {
            chemicalSourceMap[id.xy] = float4(0.5, 0.0, 0.0, 1.0);
        }
        else
        {
            chemicalSourceMap[id.xy] = float4(0.0, 0.0, 0.0, 0.5);
        }
    }
}

#pragma kernel ChemicalSourceOverlay

bool polygonCircle; // toggles helper circle for polygon vertex placement

/* Overlays chemical source map image onto output texture. Purely a visual effect. Very helpful
 * during testing, but it doesn't look very good. We'll need to improve this later to get
 * cleaner, more visually appealing outputs.
 */
[numthreads(8,8,1)]
void ChemicalSourceOverlay (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }

    if (!approx(chemicalSourceMap[id.xy].w, 0.5))
    {
        processedTrailMap[id.xy] = chemicalSourceMap[id.xy] * 2.0;
    }

    if (polygonCircle)
    {
        if (((id.x - (float)width/2.0) * (id.x - (float)width/2) + (id.y - (float)height/2) * (id.y - (float)height/2) > (float)width/4.25 * (float)width/4.25)
            && ((id.x - (float)width/2.0) * (id.x - (float)width/2) + (id.y - (float)height/2) * (id.y - (float)height/2) < (float)width/4.15 * (float)width/4.15))
        {
            processedTrailMap[id.xy] = float4(1.0, 0.0, 0.0, 0.0);
        }
    }
}

#pragma kernel DrawChemical

float mouseX; // mouse x-coordinate
float mouseY; // mouse y-coordinate
int brushType; // 0: attractant, 1: repellent, 2: eraser
int brushHalfWidth; // half-width of brush tooltip

// Draw chemical onto chemical source map.
[numthreads(1,1,1)]
void DrawChemical (uint3 id : SV_DispatchThreadID)
{
    float4 color;
    if (brushType == 0) // attractant
    {
        color = float4(0.5, 0.0, 0.0, 1.0);
    }
    else if (brushType == 1) // repellent
    {
        color = float4(0.0, 0.0, 0.5, 0.0);
    }
    else if (brushType == 2) // eraser
    {
        color = float4(0.0, 0.0, 0.0, 0.5);
    }

    for (int x = -brushHalfWidth; x <= brushHalfWidth; x++)
    {
        for (int y = -brushHalfWidth; y <= brushHalfWidth; y++)
        {
            if (x*x + y*y <= brushHalfWidth*brushHalfWidth)
            {
                int kernelX = wrapIndex(mouseX + x, width);
                int kernelY = wrapIndex(mouseY + y, height);
                chemicalSourceMap[int2(kernelX, kernelY)] = color;
            }
        }
    }
}

#pragma kernel InitializeChemicalMaps

/* Sets default (no chemicals present) alpha channel values on the chemical source map
 * and the trail map.
 * 1.0 = attractant
 * 0.5 = no chemical
 * 0.0 = repellent
 */
[numthreads(8,8,1)]
void InitializeChemicalMaps (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height)
    {
        return;
    }
    chemicalSourceMap[id.xy] = float4(0.0, 0.0, 0.0, 0.5); // 0.5 alpha value = no chemical
    trailMap[id.xy] = float4(0.0, 0.0, 0.0, 0.5);
}